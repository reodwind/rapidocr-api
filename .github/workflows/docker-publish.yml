name: Docker Image Build and Push

on:
  push:
    branches:
      - main
    paths:
      - 'version'  # 只有当 'version' 文件发生更改时才触发
  workflow_dispatch:  # 允许手动触发

# 定义全局变量
env:
  DOCKERHUB_REPO: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/rapidocr_api
  GHCR_REPO: ghcr.io/${{ secrets.GHCR_USERNAME }}/rapidocr_api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      actions: write
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version from VERSION file
        id: get_version
        run: |
          VERSION=$(cat version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if version file changed
        id: check_version_change
        run: |
          if [[ $(git diff --name-only HEAD^ HEAD | grep version) ]]; then
            echo "::set-output name=changed::true"
          else
            echo "::set-output name=changed::false"
            echo "Version file not changed, skipping build"
            exit 0
          fi

      - name: Set up Docker Buildx
        if: steps.check_version_change.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Login to GHCR
        if: steps.check_version_change.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: steps.check_version_change.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.check_version_change.outputs.changed == 'true'
        id: docker-build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          tags: |
            ${{ env.GHCR_REPO }}:${{ env.VERSION }}
            ${{ env.GHCR_REPO }}:latest
            ${{ env.DOCKERHUB_REPO }}:${{ env.VERSION }}
            ${{ env.DOCKERHUB_REPO }}:latest
          build-args: |
            VERSION=${{ env.VERSION }}

      - name: Clean up old workflow runs
        if: always()  # 总是执行，无论之前的步骤是否成功
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner
            const repo = context.repo.repo
            const workflow_id = context.workflow

            // 删除多少天前的 runs
            const days = 7
            const cutoff = new Date()
            cutoff.setDate(cutoff.getDate() - days)
            const cutoffEpoch = cutoff.getTime()

            console.log(`Deleting workflow runs older than ${days} days (${cutoff.toISOString()})`)

            // 获取 workflow runs
            let runs = await github.rest.actions.listWorkflowRuns({
              owner: owner,
              repo: repo,
              workflow_id: workflow_id,
              status: 'success',  // 只删除成功的 runs
              per_page: 100
            });

            // 循环删除旧的 runs
            for (const run of runs.data.workflow_runs) {
              const runEpoch = new Date(run.created_at).getTime()
              if (runEpoch < cutoffEpoch) {
                console.log(`Deleting run ${run.id} created at ${run.created_at}`)
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: owner,
                    repo: repo,
                    run_id: run.id,
                  })
                } catch (e) {
                  console.error(`Failed to delete run ${run.id}: ${e}`)
                }
              }
            }
